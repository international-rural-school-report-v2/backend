const request = require('supertest');
const getType = require('jest-get-type');
const server = require('../server.js');

const knex = require('../../data/dbConfig');

describe('test environment', () => {
  it("sets DB_ENV to 'test'", () => {
    expect(process.env.DB_ENV).toBe('test');
  })
})

describe('server', () => {
  describe('/ GET', () => {
    it('should return 200 status', () => {
      return request(server)
        .get('/')
        .expect(200);
    })
  })

  beforeAll(async () => {
    jest.setTimeout(20000);
    await knex.seed.run();
  });

  // afterEach(async () => {
  //   await knex.seed.run();
  // });

  describe('/auth', () => {
    describe('/login POST', () => {
      const user = {
        "username": "user1",
        "password": "password"
      }

      const notUser = {
        "username": "foobar",
        "password": "password"
      }

      const notPassword = {
        "username": "user1",
        "password": "foobar"
      }
      
      const loginValid = request(server)
        .post('/auth/login')
        .send(user);
      
      it('should return status 201', () => {
        return loginValid.expect(201);
      })

      it('should return an object', () => {
        return loginValid.then(res => {
          expect(getType(res.body)).toBe('object');
        });
      })

      it('should return status 401 w/ invalid username', () => {
        return request(server)
          .post('/auth/login')
          .send(notUser);
      })

      it('should return status 401 w/ invalid password', () => {
        return request(server)
          .post('/auth/login')
          .send(notPassword);
      })
    })

    describe('/register POST', () => {
      const userData = {
        "username": "TEST",
        "password": "password",
        "name": "TEST",
        "role_id": "1",
        "org_id": "1"
      }

      const register = request(server)
        .post('/auth/register')
        .send(userData)

      it('should return status 201', () => {
        return register.expect(201);
      })

      it('should return an object', () => {
        return register.then(res => {
          expect(getType(res.body)).toBe('object');
        });
      })
    })
  })

  describe('/public', () => {
    describe('/orgs GET', () => {
      const orgs = request(server)
        .get('/public/orgs');
      
      it('should return status 200', () => {
        return orgs.expect(200);
      })

      it('should return an array', () => {
        return orgs.then(res => {
          expect(getType(res.body)).toBe('array');
        });
      })
    })

    describe('/roles GET', () => {
      const roles = request(server)
        .get('/public/roles');

      it('should return status 200', () => {
        return roles.expect(200);
      })

      it('should return an array', () => {
        return roles.then(res => {
          expect(getType(res.body)).toBe('array');
        });
      })
    })

    describe('/issue-status GET', () => {
      const issue_status = request(server)
        .get('/public/issue-status');

      it('should return status 200', () => {
        return issue_status.expect(200);
      })

      it('should return an array', () => {
      return issue_status.then(res => {
        expect(getType(res.body)).toBe('array');
        });
      })
    })
  })

  describe('/issues', () => {
    // Tokens generated by logging in w/o expiresIn set on jwt.sign
    const user1 = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWJqZWN0IjoxLCJ1c2VybmFtZSI6InVzZXIxIiwib3JnX3JvbGVzIjpbeyJvcmdfaWQiOjEsIm9yZ19uYW1lIjoiT3JnYW5pemF0aW9uIE9uZSIsInJvbGVzIjpbeyJyb2xlX2lkIjoxLCJyb2xlX25hbWUiOiJTY2hvb2wgQWRtaW5pc3RyYXRvciJ9XX1dLCJpYXQiOjE1NTg0NzY5NjZ9.y4tdBXUO6YZajW7tIcd_d1ioRLe2DXiO8nDqEXzvZho';
    
    const user3 = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWJqZWN0IjozLCJ1c2VybmFtZSI6InVzZXIzIiwib3JnX3JvbGVzIjpbeyJvcmdfaWQiOjIsIm9yZ19uYW1lIjoiT3JnYW5pemF0aW9uIFR3byIsInJvbGVzIjpbeyJyb2xlX2lkIjoxLCJyb2xlX25hbWUiOiJTY2hvb2wgQWRtaW5pc3RyYXRvciJ9XX1dLCJpYXQiOjE1NTg0NzcwMjR9.CXTFYfZIiqvgUu0XpvsQd015ew6Qwa1_IojfwbOH_4U';

    const user6 = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWJqZWN0Ijo2LCJ1c2VybmFtZSI6InVzZXI2Iiwib3JnX3JvbGVzIjpbeyJvcmdfaWQiOjMsIm9yZ19uYW1lIjoiT3JnYW5pemF0aW9uIFRocmVlIiwicm9sZXMiOlt7InJvbGVfaWQiOjEsInJvbGVfbmFtZSI6IlNjaG9vbCBBZG1pbmlzdHJhdG9yIn1dfV0sImlhdCI6MTU1ODU3ODU4NH0.K6E50pC0U4-diy95wQSYcH2b5ZVl0pqS3Zp96CBEx3s';

    describe('/ GET', () => {
      const getIssues1 = request(server)
        .get('/issues')
        .set({ Authorization: user1 });

      const getIssues3 = request(server)
        .get('/issues')
        .set({ Authorization: user3 });

      const getIssues6 = request(server)
        .get('/issues')
        .set({ Authorization: user6 });

      it('should return status 200', () => {
        return getIssues1.expect(200);
      })

      it('should return an array', () => {
        return getIssues1.then(res => {
          expect(getType(res.body)).toBe('array');
        })
      })

      it('should return an array of objects', () => {
        return getIssues1.then(res => {
          expect(getType(res.body[0])).toBe('object');
        })
      })

      it('should return an array of length 4 for a user in Organization 1', () => {
        return getIssues1.then(res => {
          expect(res.body).toHaveLength(4);
        })
      })

      it('should return an array of length 1 for a user in Organization 2', () => {
        return getIssues3.then(res => {
          expect(res.body).toHaveLength(1);
        })
      })

      it('should return status 404 for a user in Organization 3', () => {
        return getIssues6.expect(404);
      })
    })

    describe('/ POST', () => {
      const issue = {
        name: 'TEST NAME',
        comments: 'TEST COMMENT',
        status_id: 4,
      }
      const postIssue = request(server)
        .post('/issues')
        .set({ Authorization: user1 })
        .send(issue);
        
      it('should return status 200', () => {
        return postIssue.expect(200);
      })
      
      it('should return an array', () => {
        return postIssue.then(res => {
          expect(getType(res.body)).toBe('array');
        })
      })

      it('should return an array of objects', () => {
        return postIssue.then(res => {
          expect(getType(res.body[0])).toBe('object');
        })
      })
    })

    describe('/:id GET', () => {
      const getIssueRtID = request(server)
        .get('/issues/1')
        .set({ Authorization: user1 });

      it('should return status 200', () => {
        return getIssueRtID.expect(200);
      })

      it('should return an object', () => {
        return getIssueRtID.then(res => {
          expect(getType(res.body)).toBe('object');
        });
      })
    })

    describe('/:id PUT', () => {
      const putIssueName = request(server)
        .put('/issues/1')
        .set({ Authorization: user1 })
        .send({name: 'TEST NAME'});

      // const putIssueComment = request(server)
      //   .put('/issues/1')
      //   .set({ Authorization: user1 })
      //   .send({comments: 'TEST COMMENT'});

      // const putIssueStatus = request(server)
      //   .put('/issues/1')
      //   .set({ Authorization: user1 })
      //   .send({status_id: 4});
      
      it('should return status 200', () => {
        return putIssueName.expect(200);
      })
      
      it('should return an array', () => {
        return putIssueName.then(res => {
          expect(getType(res.body)).toBe('array');
        })
      })

      it('should return an array of objects', () => {
        return putIssueName.then(res => {
          expect(getType(res.body[0])).toBe('object');
        })
      })
    })

    describe('/:id DELETE', () => {
      const deleteIssue = request(server)
        .delete('/issues/2')
        .set({ Authorization: user1 });
      
      it('should return status 200', () => {
        return deleteIssue.expect(200);
      })
      
      it('should return an array', () => {
        return deleteIssue.then(res => {
          expect(getType(res.body)).toBe('array');
        })
      })

      it('should return an array of objects', () => {
        return deleteIssue.then(res => {
          expect(getType(res.body[0])).toBe('object');
        })
      })
    })

    describe('/org/:org_id GET', () => {
      const getIssuesRtOrgID = request(server)
        .get('/issues/org/1')
        .set({ Authorization: user1 });

      it('should return status 200', () => {
        return getIssuesRtOrgID.expect(200);
      })

      it('should return an array', () => {
        return getIssuesRtOrgID.then(res => {
          expect(getType(res.body)).toBe('array');
        });
      })

      it('should return an array of objects', () => {
        return getIssuesRtOrgID.then(res => {
          expect(getType(res.body[0])).toBe('object');
        })
      })
    })
  })
})
